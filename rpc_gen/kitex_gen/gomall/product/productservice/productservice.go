// Code generated by Kitex v0.9.0. DO NOT EDIT.

package productservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	product "gomall/rpc_gen/kitex_gen/gomall/product"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListProducts": kitex.NewMethodInfo(
		listProductsHandler,
		newProductServiceListProductsArgs,
		newProductServiceListProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetProduct": kitex.NewMethodInfo(
		getProductHandler,
		newProductServiceGetProductArgs,
		newProductServiceGetProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchProducts": kitex.NewMethodInfo(
		searchProductsHandler,
		newProductServiceSearchProductsArgs,
		newProductServiceSearchProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getAllProducts": kitex.NewMethodInfo(
		getAllProductsHandler,
		newProductServiceGetAllProductsArgs,
		newProductServiceGetAllProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	productServiceServiceInfo                = NewServiceInfo()
	productServiceServiceInfoForClient       = NewServiceInfoForClient()
	productServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.0",
		Extra:           extra,
	}
	return svcInfo
}

func listProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceListProductsArgs)
	realResult := result.(*product.ProductServiceListProductsResult)
	success, err := handler.(product.ProductService).ListProducts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceListProductsArgs() interface{} {
	return product.NewProductServiceListProductsArgs()
}

func newProductServiceListProductsResult() interface{} {
	return product.NewProductServiceListProductsResult()
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductArgs)
	realResult := result.(*product.ProductServiceGetProductResult)
	success, err := handler.(product.ProductService).GetProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductArgs() interface{} {
	return product.NewProductServiceGetProductArgs()
}

func newProductServiceGetProductResult() interface{} {
	return product.NewProductServiceGetProductResult()
}

func searchProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceSearchProductsArgs)
	realResult := result.(*product.ProductServiceSearchProductsResult)
	success, err := handler.(product.ProductService).SearchProducts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceSearchProductsArgs() interface{} {
	return product.NewProductServiceSearchProductsArgs()
}

func newProductServiceSearchProductsResult() interface{} {
	return product.NewProductServiceSearchProductsResult()
}

func getAllProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetAllProductsArgs)
	realResult := result.(*product.ProductServiceGetAllProductsResult)
	success, err := handler.(product.ProductService).GetAllProducts(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetAllProductsArgs() interface{} {
	return product.NewProductServiceGetAllProductsArgs()
}

func newProductServiceGetAllProductsResult() interface{} {
	return product.NewProductServiceGetAllProductsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ListProducts(ctx context.Context, req *product.ListProductReq) (r *product.ListProductResp, err error) {
	var _args product.ProductServiceListProductsArgs
	_args.Req = req
	var _result product.ProductServiceListProductsResult
	if err = p.c.Call(ctx, "ListProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, req *product.GetProductReq) (r *product.GetProductResp, err error) {
	var _args product.ProductServiceGetProductArgs
	_args.Req = req
	var _result product.ProductServiceGetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchProducts(ctx context.Context, req *product.SearchProductReq) (r *product.SearchProductResp, err error) {
	var _args product.ProductServiceSearchProductsArgs
	_args.Req = req
	var _result product.ProductServiceSearchProductsResult
	if err = p.c.Call(ctx, "SearchProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllProducts(ctx context.Context, req *product.GetAllProductsReq) (r *product.GetAllProductsResp, err error) {
	var _args product.ProductServiceGetAllProductsArgs
	_args.Req = req
	var _result product.ProductServiceGetAllProductsResult
	if err = p.c.Call(ctx, "getAllProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
